$date
   Fri Aug 22 02:42:32 2025
$end

$version
  2024.1
  $dumpfile ("dump.vcd") 
$end

$timescale
  1ps
$end

$scope module tbench_top $end
$scope module i_intf $end
$var reg 32 ! in_a [31:0] $end
$var reg 32 " in_b [31:0] $end
$var reg 3 # in_opcode [2:0] $end
$var reg 32 $ out_result [31:0] $end
$var reg 1 % out_zero $end
$var reg 1 & out_carry $end
$var reg 1 ' out_overflow $end
$var reg 1 ( out_negative $end
$var reg 1 ) out_div_by_zero $end
$scope module dut $end
$var reg 32 ! in_a [31:0] $end
$var reg 32 " in_b [31:0] $end
$var reg 3 # in_opcode [2:0] $end
$var reg 1 % out_zero $end
$var reg 1 & out_carry $end
$var reg 1 ' out_overflow $end
$var reg 1 ( out_negative $end
$var reg 1 ) out_div_by_zero $end
$upscope $end
$scope module drv $end
$var reg 32 ! in_a [31:0] $end
$var reg 32 " in_b [31:0] $end
$var reg 3 # in_opcode [2:0] $end
$var reg 32 $ out_result [31:0] $end
$var reg 1 % out_zero $end
$var reg 1 & out_carry $end
$var reg 1 ' out_overflow $end
$var reg 1 ( out_negative $end
$var reg 1 ) out_div_by_zero $end
$upscope $end
$scope module mon $end
$var reg 32 ! in_a [31:0] $end
$var reg 32 " in_b [31:0] $end
$var reg 3 # in_opcode [2:0] $end
$var reg 32 $ out_result [31:0] $end
$var reg 1 % out_zero $end
$var reg 1 & out_carry $end
$var reg 1 ' out_overflow $end
$var reg 1 ( out_negative $end
$var reg 1 ) out_div_by_zero $end
$upscope $end
$upscope $end
$scope module t1 $end
$var reg 32 * env $end
$upscope $end
$scope module dut $end
$var wire 32 + in_a [31:0] $end
$var wire 32 , in_b [31:0] $end
$var wire 3 - in_opcode [2:0] $end
$var reg 32 . out_result [31:0] $end
$var reg 1 / out_zero $end
$var reg 1 0 out_carry $end
$var reg 1 1 out_overflow $end
$var reg 1 2 out_negative $end
$var reg 1 3 out_div_by_zero $end
$var reg 33 4 add_ext [32:0] $end
$var reg 33 5 sub_ext [32:0] $end
$var reg 64 6 mul_full [63:0] $end
$var reg 5 7 shamt [4:0] $end
$var reg 1 8 xilinx_isim_temp_1_ln16_blkAssignCaching $end
$var reg 1 9 xilinx_isim_temp_0_ln13_blkAssignCaching $end
$upscope $end
$upscope $end
$enddefinitions $end

#0
$dumpvars
b10110110 !
b11010110 "
b101 #
b11110110 $
0%
0&
0'
0(
0)
b100001110010010000000000111000 *
b10110110 +
b11010110 ,
b101 -
b11110110 .
0/
00
01
02
03
b110001100 4
b111111111111111111111111111100000 5
b1001100000100100 6
b10110 7
08
09
$end

#1000
b11001110 !
b10010010 "
b11011110 $
b11001110 +
b10010010 ,
b11011110 .
b101100000 4
b111100 5
b111010101111100 6
b10010 7

#2000
b111011 !
b10100100 "
b110 #
b10011111 $
b111011 +
b10100100 ,
b110 -
b10011111 .
b11011111 4
b111111111111111111111111110010111 5
b10010111001100 6
b100 7

#3000
b10100101 !
b11001101 "
b101 #
b11101101 $
b10100101 +
b11001101 ,
b101 -
b11101101 .
b101110010 4
b111111111111111111111111111011000 5
b1000010000100001 6
b1101 7

#4000
b1000111 !
b11100101 "
b11100111 $
b1000111 +
b11100101 ,
b11100111 .
b100101100 4
b111111111111111111111111101100010 5
b11111110000011 6
b101 7

#5000
b1110110 !
b1001 "
b1 #
b1101101 $
1&
b1110110 +
b1001 ,
b1 -
b1101101 .
10
b1111111 4
b1101101 5
b10000100110 6
b1001 7

#6000
b1100000 "
b10110 $
b1100000 ,
b10110 .
10
b11010110 4
b10110 5
b10110001000000 6
b0 7

#7000
b10001 !
b110001 "
b0 #
b1000010 $
0&
b10001 +
b110001 ,
b0 -
b1000010 .
00
b1000010 4
b111111111111111111111111111100000 5
b1101000001 6
b10001 7

#8000
b11001111 !
b10110001 "
b110000000 $
b11001111 +
b10110001 ,
b110000000 .
b110000000 4
b11110 5
b1000111100011111 6

#9000
b111 !
b1110101 "
b101 #
b1110111 $
b111 +
b1110101 ,
b101 -
b1110111 .
b1111100 4
b111111111111111111111111110010010 5
b1100110011 6
b10101 7
